service: vu-amplify-js
frameworkVersion: '3'

plugins:
  - serverless-offline

custom:

  stageVariables: ${file(../var/${self:provider.stage}-var.yml)}

  stages:
    - dev
    - staging
    - prod


provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  logRetentionInDays: 365
  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}    
  stackTags:
    "vu:environment": ${sls:stage}
    "vu:applicationName": "amplify"
    "vu:owner": "amplify@vanderbilt.edu"
  tags:
    "vu:environment": ${sls:stage}
    "vu:applicationName": "amplify"
    "vu:owner": "amplify@vanderbilt.edu"
  environment:
    AZURE_OPENAI_RESOURCE_NAME: openai
    AGENT_ENDPOINT: ${self:custom.stageVariables.AGENT_ENDPOINT}
    AGENT_STATE_DYNAMODB_TABLE: vu-amplify-${sls:stage}-agent-state
    AGENT_STATE_BUCKET: vu-amplify-${sls:stage}-agent-state
    LLM_ENDPOINTS_SECRETS_NAME: ${sls:stage}-openai-endpoints
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${self:custom.stageVariables.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    S3_CHUNKS_BUCKET_NAME: vu-amplify-${sls:stage}-rag-chunks
    S3_FILE_TEXT_BUCKET_NAME: vu-amplify-${sls:stage}-file-text
    S3_IMAGE_INPUT_BUCKET_NAME: vu-amplify-${sls:stage}-image-input
    COGNITO_USER_POOL_ID: ${self:custom.stageVariables.COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${self:custom.stageVariables.COGNITO_CLIENT_ID}
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    SECRETS_NAME: ${self:custom.stageVariables.SECRETS_NAME}
    SECRETS_ARN_NAME: ${self:custom.stageVariables.SECRETS_ARN_NAME}
    OPENAI_ENDPOINT: ${self:custom.stageVariables.OPENAI_ENDPOINT}
    CHAT_USAGE_DYNAMO_TABLE: vu-amplify-${sls:stage}-chat-usage
    REQUEST_STATE_DYNAMO_TABLE: vu-amplify-${sls:stage}-request-state
    HASH_FILES_DYNAMO_TABLE: ${self:custom.stageVariables.HASH_FILES_DYNAMO_TABLE}
    TRACE_BUCKET_NAME: vu-amplify-${sls:stage}-chat-traces
    ASSISTANT_TASK_RESULTS_BUCKET_NAME: vu-amplify-${sls:stage}-assistant-results
    ASSISTANT_LOGS_BUCKET_NAME: vu-amplify-${sls:stage}-assistant-chat-logs
    ASSISTANTS_ALIASES_DYNAMODB_TABLE: vu-amplify-assistants-${sls:stage}-assistant-aliases
    ASSISTANTS_DYNAMODB_TABLE: vu-amplify-assistants-${sls:stage}-assistants
    OBJECT_ACCESS_PERMISSIONS_ENDPOINT: ${self:custom.stageVariables.OBJECT_ACCESS_PERMISSIONS_ENDPOINT}
    ASSISTANT_QUEUE_NAME: vu-amplify-${sls:stage}-assistant-tasks
    TRACING_ENABLED: true
    DATASOURCE_REGISTRY_DYNAMO_TABLE: vu-amplify-${sls:stage}-datasource-registry
    API_KEYS_DYNAMODB_TABLE: vu-amplify-object-access-${sls:stage}-api-keys
    API_BASE_URL: ${self:custom.stageVariables.API_BASE_URL}
    COST_CALCULATIONS_DYNAMO_TABLE: vu-amplify-${sls:stage}-cost-calculations
    HISTORY_COST_CALCULATIONS_DYNAMO_TABLE: vu-amplify-${sls:stage}-history-cost-calculations
    MODEL_RATE_TABLE: chat-billing-${sls:stage}-model-rates
    LAMBDA_JS_IAM_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy
    GROUP_ASSISTANT_CONVERSATIONS_DYNAMO_TABLE: vu-amplify-assistants-${sls:stage}-group-assistant-conversations
    S3_GROUP_ASSISTANT_CONVERSATIONS_BUCKET_NAME: vu-amplify-assistants-${sls:stage}-group-conversations-content
    ADMIN_DYNAMODB_TABLE: vu-amplify-admin-${sls:stage}-admin-configs
    DEP_REGION: ${self:custom.stageVariables.DEP_REGION}
    # STREAM: false # optional 

  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole      
        - - arn:aws:iam::${aws:accountId}:policy/${self:provider.environment.LAMBDA_JS_IAM_POLICY_NAME}


functions:
  chat:
    handler: index.handler
    memorySize: 1024
    timeout: 900
    url:
      cors: true
      invokeMode: RESPONSE_STREAM
    environment:
        assistant_task_queue_url:
          Ref: AssistantTaskQueue

  api_g_chat:
    handler: indexApiG.handler
    memorySize: 1024
    timeout: 180
    environment:
        assistant_task_queue_url:
          Ref: AssistantTaskQueue
    events:
      - http:
          path: api_g_chat/chat
          method: post
          cors: true
    

  assistant_queue:
    handler: assistantQueueRouter.handler
    memorySize: 1024
    timeout: 900
    events:
        - sqs:
            arn:
              Fn::GetAtt:
                - AssistantTaskQueue
                - Arn
    environment:
        assistant_task_queue_url:
          Ref: AssistantTaskQueue
  
  reset_billing:
    handler: billing/reset.handler
    memorySize: 512 # increased memory size to increase speed
    timeout: 900 # 900 seconds (15 minutes) is the maximum
    events:
      - schedule:
          rate: cron(0 0 * * ? *) # trigger at midnight UTC every day
  
  # provides real-time usage information via API gateway
  mtd_cost_reporter:
    handler: billing/mtd.handler
    memorySize: 128
    events:
      - http:
          path: billing/mtd-cost
          method: post
          cors: true

  api_key_user_cost:
    handler: billing/mtd.apiKeyUserCostHandler
    memorySize: 128
    events:
      - http:
          path: billing/api-key-user-cost
          method: post
          cors: true

resources:
  Resources:
    LambdaJSIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.LAMBDA_JS_IAM_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query 
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - sqs:SendMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - bedrock:InvokeModelWithResponseStream
                - bedrock:InvokeModel
              Resource:
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_STATE_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_STATE_DYNAMODB_TABLE}/index/*"
                - "arn:aws:s3:::${self:provider.environment.AGENT_STATE_BUCKET}/*"
                - "arn:aws:s3:::${self:provider.environment.AGENT_STATE_BUCKET}"
                - 'arn:aws:secretsmanager:us-east-1:*:secret:${self:provider.environment.SECRETS_ARN_NAME}'
                - '${self:provider.environment.LLM_ENDPOINTS_SECRETS_NAME_ARN}'
                - "arn:aws:s3:::${self:provider.environment.S3_FILE_TEXT_BUCKET_NAME}/*"
                - "arn:aws:s3:::${self:provider.environment.S3_IMAGE_INPUT_BUCKET_NAME}/*"
                - "arn:aws:s3:::${self:provider.environment.TRACE_BUCKET_NAME}/*"
                - "arn:aws:s3:::${self:provider.environment.ASSISTANT_TASK_RESULTS_BUCKET_NAME}/*"
                - "arn:aws:s3:::${self:provider.environment.ASSISTANT_LOGS_BUCKET_NAME}/*"
                - "arn:aws:s3:::${self:provider.environment.S3_GROUP_ASSISTANT_CONVERSATIONS_BUCKET_NAME}"
                - "arn:aws:s3:::${self:provider.environment.S3_GROUP_ASSISTANT_CONVERSATIONS_BUCKET_NAME}/*"
                - "arn:aws:sqs:${aws:region}:*:${self:provider.environment.ASSISTANT_QUEUE_NAME}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CHAT_USAGE_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CHAT_USAGE_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.REQUEST_STATE_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.HASH_FILES_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.HISTORY_COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.HISTORY_COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.MODEL_RATE_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.MODEL_RATE_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.GROUP_ASSISTANT_CONVERSATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.GROUP_ASSISTANT_CONVERSATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ADMIN_DYNAMODB_TABLE}"
                - 'arn:aws:bedrock:*::foundation-model/*'
                - !Sub arn:aws:bedrock:*:${AWS::AccountId}:inference-profile/*
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_ALIASES_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DATASOURCE_REGISTRY_DYNAMO_TABLE}"
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource:
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.REQUEST_STATE_DYNAMO_TABLE}"
    
    RequestStateDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          -
            AttributeName: requestId
            AttributeType: S
          -
            AttributeName: user
            AttributeType: S
        KeySchema:
          -
            AttributeName: user
            KeyType: HASH
          -
            AttributeName: requestId
            KeyType: RANGE
        TableName: ${self:provider.environment.REQUEST_STATE_DYNAMO_TABLE}
    DatasourceRegistryDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          -
            AttributeName: type
            AttributeType: S
        KeySchema:
          -
            AttributeName: type
            KeyType: HASH
        TableName: ${self:provider.environment.DATASOURCE_REGISTRY_DYNAMO_TABLE}
    CostCalculationsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: accountInfo
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: accountInfo
            KeyType: RANGE
        TableName: ${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}
    HistoryCostCalculationsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: userDate
            AttributeType: S
          - AttributeName: accountInfo
            AttributeType: S
        KeySchema:
          - AttributeName: userDate
            KeyType: HASH
          - AttributeName: accountInfo
            KeyType: RANGE
        TableName: ${self:provider.environment.HISTORY_COST_CALCULATIONS_DYNAMO_TABLE}
    ChatTracesBucket:
         Type: AWS::S3::Bucket
         Properties:
           BucketName: ${self:provider.environment.TRACE_BUCKET_NAME}
    AssistantTaskQueue:
          Type: "AWS::SQS::Queue"
          Properties:
            VisibilityTimeout: 900
            QueueName: ${self:provider.environment.ASSISTANT_QUEUE_NAME}
    AssistantTaskResultsBucket:
         Type: AWS::S3::Bucket
         Properties:
           BucketName: ${self:provider.environment.ASSISTANT_TASK_RESULTS_BUCKET_NAME}
    AssistantLogsBucket:
         Type: AWS::S3::Bucket
         Properties:
           BucketName: ${self:provider.environment.ASSISTANT_LOGS_BUCKET_NAME}