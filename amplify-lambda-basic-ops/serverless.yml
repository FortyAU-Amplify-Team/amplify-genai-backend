service: vu-amplify-lambda-basic-ops

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

custom:
  pythonRequirements:
    dockerizePip: true
  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    CHAT_ENDPOINT: "http://localhost:8000" #${self:custom.stageVariables.CHAT_ENDPOINT}
    DEFAULT_SECRET_PARAMETER_PREFIX: "/pdb"
    DEFAULT_ACCOUNT: "default"
    DEFAULT_LLM_QUERY_MODEL: "anthropic.claude-3-5-sonnet-20240620-v1:0"
    OBJECT_ACCESS_API_ENDPOINT: ${self:custom.stageVariables.OBJECT_ACCESS_PERMISSIONS_ENDPOINT}
    USER_SESSIONS_DYNAMODB_TABLE_NAME: ${self:service}-${sls:stage}-work-sessions
    USER_RECORDS_DYNAMODB_TABLE_NAME: ${self:service}-${sls:stage}-work-records
    ATTACHMENT_STORAGE_S3_BUCKET_NAME: ${self:service}-${sls:stage}-work-record-attachments
    ACCOUNTS_DYNAMO_TABLE: vu-amplify-${sls:stage}-accounts
    API_KEYS_DYNAMODB_TABLE: vu-amplify-object-access-${sls:stage}-api-keys

  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_SESSIONS_DYNAMODB_TABLE_NAME}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_RECORDS_DYNAMODB_TABLE_NAME}
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_STORAGE_S3_BUCKET_NAME}/*
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:UpdateItem


functions:

  llm_prompt_datasource:
    handler: service/core.llm_prompt_datasource
    timeout: 30
    events:
      - http:
          path: llm/query
          method: post
          cors: true

  llm_qa_check:
    handler: service/core.llm_qa_check
    timeout: 30
    events:
      - http:
            path: /llm/qa_check
            method: post
            cors: true

  echo:
    handler: service/work.echo
    events:
      - http:
          path: /work/echo
          method: post
          cors: true

  create_user_session:
    handler: service/work.create_user_session
    timeout: 30
    events:
      - http:
          path: /work/session/create
          method: post
          cors: true

  add_user_record:
    handler: service/work.add_user_record
    timeout: 30
    events:
      - http:
          path: /work/session/add_record
          method: post
          cors: true

  list_user_records:
    handler: service/work.list_user_records
    timeout: 30
    events:
      - http:
          path: /work/session/list_records
          method: post
          cors: true

  delete_user_record:
    handler: service/work.delete_user_record
    timeout: 30
    events:
      - http:
          path: /work/session/delete_record
          method: post
          cors: true

  stitch_records:
    handler: service/work.stitch_records
    timeout: 30
    events:
      - http:
          path: /work/session/stitch_records
          method: post
          cors: true

resources:
  Resources:
    UserSessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_SESSIONS_DYNAMODB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: session_id
            AttributeType: N
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: session_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    UserRecordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_RECORDS_DYNAMODB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: session_id
            AttributeType: N
          - AttributeName: record_id
            AttributeType: N
        KeySchema:
          - AttributeName: session_id
            KeyType: HASH
          - AttributeName: record_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    AttachmentStorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_STORAGE_S3_BUCKET_NAME}
