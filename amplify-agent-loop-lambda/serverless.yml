service:  vu-amplify-agent-loop

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

custom:
  pythonRequirements:
    dockerizePip: non-linux
  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  logRetentionInDays: 365
  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}    
  environment:
    AGENT_MODEL: "gpt-4o-mini"
    SECRETS_NAME: ${self:custom.stageVariables.SECRETS_NAME}
    SECRETS_ARN_NAME: ${self:custom.stageVariables.SECRETS_ARN_NAME}
    LLM_ENDPOINTS_SECRETS_NAME: ${sls:stage}-openai-endpoints
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${self:custom.stageVariables.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    API_KEYS_DYNAMODB_TABLE: vu-amplify-object-access-${sls:stage}-api-keys
    ACCOUNTS_DYNAMO_TABLE: vu-amplify-${sls:stage}-accounts
    COST_CALCULATIONS_DYNAMO_TABLE: vu-amplify-${sls:stage}-cost-calculations
    LAMBDA_API_IAM_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy
    API_BASE_URL: ${self:custom.stageVariables.API_BASE_URL}
    CHAT_ENDPOINT: ${self:custom.stageVariables.CHAT_ENDPOINT}
    OPS_DYNAMODB_TABLE: vu-amplify-lambda-ops-${sls:stage}-ops
    AGENT_STATE_DYNAMODB_TABLE: vu-amplify-${sls:stage}-agent-state
    AGENT_STATE_BUCKET: vu-amplify-${sls:stage}-agent-state
    # We will need to change this below in the policy when we migrate too
    OPS_LAMBDA_NAME: vu-amplify-se-dev-opExecLambda
    AGENT_QUEUE_URL: !Ref AgentQueue
    FILES_DYNAMO_TABLE: vu-amplify-${sls:stage}-user-files
    USER_TAGS_DYNAMO_TABLE: vu-amplify-${sls:stage}-user-tags
    EMAIL_SETTINGS_DYNAMO_TABLE: vu-amplify-${sls:stage}-email-settings
    ORGANIZATION_EMAIL_DOMAIN: ${self:custom.stageVariables.ORGANIZATION_EMAIL_DOMAIN}
    S3_IMAGE_INPUT_BUCKET_NAME: vu-amplify-${sls:stage}-image-input
    S3_RAG_INPUT_BUCKET_NAME: vu-amplify-${sls:stage}-rag-input
    AGENT_EVENT_TEMPLATES_DYNAMODB_TABLE: vu-amplify-${sls:stage}-agent-event-templates
    ASSISTANTS_ALIASES_DYNAMODB_TABLE: vu-amplify-assistants-${sls:stage}-assistant-aliases
    ASSISTANTS_DYNAMODB_TABLE: vu-amplify-assistants-${sls:stage}-assistants
    DEFAULT_SECRET_PARAMETER_PREFIX: "/agent"

  iam:
    role:
      managedPolicies:
        - !Ref LambdaAPIIAMPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


functions:

  agentRouter:
    handler: service/core.route
    timeout: 900
    events:
      - http:
          path: vu-agent/{proxy+}
          method: post

  agentRouterFnUrl:
    handler: service/core.route
    timeout: 900
    url:
      cors: true

  agentEventProcessor:
    handler: service/agent_queue.route_queue_event
    timeout: 900
    events:
      - sqs:
          arn: !GetAtt AgentQueue.Arn
          batchSize: 1

resources:
  Resources:
    LambdaAPIIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.LAMBDA_API_IAM_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:PutParameter
              Resource:
                - "arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter${self:provider.environment.DEFAULT_SECRET_PARAMETER_PREFIX}/*"
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:vu-amplify-se-dev-opExecLambda
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - s3:GetObject
                - s3:PutObject
                - s3:ListObjects
                - s3:ListBucket
                - s3:DeleteObject
              Resource:
                - "arn:aws:s3:::${self:provider.environment.AGENT_STATE_BUCKET}/*"
                - "arn:aws:s3:::${self:provider.environment.AGENT_STATE_BUCKET}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_ALIASES_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_ALIASES_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OPS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OPS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_STATE_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_STATE_DYNAMODB_TABLE}/index/*"
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - '${self:provider.environment.LLM_ENDPOINTS_SECRETS_NAME_ARN}'
                - 'arn:aws:secretsmanager:us-east-1:*:secret:${self:provider.environment.SECRETS_ARN_NAME}'
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource:
                - !GetAtt AgentQueue.Arn
                - !GetAtt AgentDeadLetterQueue.Arn

            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource:
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.FILES_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.FILES_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USER_TAGS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USER_TAGS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.EMAIL_SETTINGS_DYNAMO_TABLE}"

            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:HeadObject
              Resource:
                - "arn:aws:s3:::${self:provider.environment.S3_RAG_INPUT_BUCKET_NAME}/*"
                - "arn:aws:s3:::${self:provider.environment.S3_IMAGE_INPUT_BUCKET_NAME}/*"
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource:
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_EVENT_TEMPLATES_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_EVENT_TEMPLATES_DYNAMODB_TABLE}/index/*"


    AgentStateDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AGENT_STATE_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: sessionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    AgentStateBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.AGENT_STATE_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000

    AgentQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-agent-queue
        VisibilityTimeout: 910
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt AgentDeadLetterQueue.Arn
          maxReceiveCount: 3

    AgentDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-agent-dlq
        MessageRetentionPeriod: 1209600

    AgentEmailTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${sls:stage}-email-topic
        Subscription:
          - Protocol: sqs
            Endpoint: !GetAtt AgentQueue.Arn

    AgentEventTemplatesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AGENT_EVENT_TEMPLATES_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: tag
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: tag
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    AgentEmailTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - !Ref AgentEmailTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ses.amazonaws.com
              Action: sns:Publish
              Resource: !Ref AgentEmailTopic

    # Update SQS policy to allow SNS
    AgentQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AgentQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt AgentQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AgentEmailTopic